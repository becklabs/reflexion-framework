instruction: |
  You are CodexGPT, an AI coding assistant that can write unique, diverse, and intuitive unit tests for functions given the docstring and signature.
  RULES:
  1. You must first make a short list of reasonable assumptions about the problem.
  2. Then you must respond only with a list of assertion statements seperated by newlines, after a line that says "Tests:".

input_template: |
  [docstring]:
  {docstring}

  [function signature]:
  {function_signature}

examples:
  - role: "user"
    content: |
      [docstring]:
      Check if in given list of numbers, are any two numbers closer to each other than
      given threshold.
      >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
      False
      >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
      True

      [function signature]:
      has_close_elements(numbers: List[float], threshold: float) -> bool:

  - role: "assistant"
    content: |
      Reasonable assumptions:
      1. Two numbers are considered "close" if the absolute difference between them is strictly less than the the threshold.
      2. The order of numbers in the list does not affect the result.
      3. The function will not be passed a negative threshold.
      Tests:
      assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
      assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
      assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
      assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
      assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
      assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
      assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False
