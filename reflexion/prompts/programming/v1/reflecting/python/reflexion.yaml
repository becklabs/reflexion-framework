instruction: |
  You are an advanced Python programming agent.
  You will be given:
  1. A function docstring
  2. An implementation of this function
  3. A series of unit tests results for this function
  Write a few sentences to explain why your implementation is wrong as indicated by the tests, and what specifically can be done to overcome the error. You will need this as guidance when you try again later."

input_template: |
  [docstring]
  {docstring}

  [function impl]:
  {previous_impl}

  [unit test results]:
  {unit_test_results}

examples:
  - role: "user"
    content: |
      [docstring]
      Consider a matrix `M` with dimensions `width * height`, such that every cell
      has value `0` or `1`, and any square sub-matrix of `M` of size `sideLength *
      sideLength` has at most `maxOnes` ones.

      Return the maximum possible number of ones that the matrix `M` can have.

      Example 1:

      Input: width = 3, height = 3, sideLength = 2, maxOnes = 1
      Output: 4
      Explanation:
      In a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.
      The best solution that has 4 ones is:
      [1,0,1]
      [0,0,0]
      [1,0,1]

      Example 2:

      Input: width = 3, height = 3, sideLength = 2, maxOnes = 2
      Output: 6
      Explanation:
      [1,0,1]
      [1,0,1]
      [1,0,1]

      Constraints:

      * `1 <= width, height <= 100`
      * `1 <= sideLength <= width, height`
      * `0 <= maxOnes <= sideLength * sideLength` 

      [function impl]:
      def maximum_number_of_ones(width, height, sideLength, maxOnes):
          R = min(width, height)
          C = max(width, height)

          fullR = R // sideLength
          fullC = C // sideLength

          total = fullR * fullC * maxOnes
          double_overlap = (R % sideLength) * (C % sideLength)

          if maxOnes <= double_overlap:
              total += (fullR + fullC + 1) * maxOnes
          else:
              total += (fullR + fullC + 1) * double_overlap
              ones_leftover = maxOnes - double_overlap 

              bottom_space = sideLength * (R % sideLength) - double_overlap
              put_to_bottom = min(bottom_space, ones_leftover)
              total += put_to_bottom * fullC

              ones_leftover -= put_to_bottom
              total += ones_leftover * fullR

          return total

      [unit test results]:
      Tests passed: 
      assert maximum_number_of_ones(1, 1, 1, 0) == 0
      assert maximum_number_of_ones(3, 3, 2, 2) == 6
      assert maximum_number_of_ones(5, 6, 3, 3) == 12

      Tests failed: 
      assert maximum_number_of_ones(74, 52, 10, 77) == 3043
      Message: Assertion error, actual left-hand value was 3168
  
  - role: "assistant"
    content: |
      The implementation failed on the test case with width=74, height=52, sideLength=10, and maxOnes=77, yielding a result of 3168 instead of the expected 3043. The flaw in the initial solution stems from not accounting for the ones that can be placed on the right-most column after placing them in the bottom row. Specifically, once the maxOnes exceed the double overlap, the solution places the leftover ones only at the bottom rows, neglecting the available spaces on the right-most columns. As a result, the code often overestimates the total count of ones. To rectify this error, an additional step should be introduced to accommodate the remaining ones on the right side of the matrix after first accommodating them at the bottom. This can be done by determining the available space on the right-most columns and placing the ones accordingly, ensuring the maximum placement of ones is achieved across both dimensions.
  